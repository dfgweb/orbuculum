# ====================================================================
define orbuculum
  help orbuculum
end
document orbuculum
GDB SWO Trace Configuration Helpers
===================================

Setup Device
------------
STM32;
  enableSTM32SWO  : Enable SWO on STM32 pins (for STM32F4 if 4 is passed as first argument)
  enableSTM32TRACE: Start TRACE on STM32 pins

IMXRT1021;
  enableIMXRT1021SWO : Enable SWO on IMXRT pins

All;
  prepareSWO      : Prepare SWO output in specified format

Configure DWT
-------------
dwtPOSTCNT        : Enable POSTCNT underflow event counter packet generation
dwtFOLDEVT        : Enable folded-instruction counter overflow event packet generation
dwtLSUEVT         : Enable LSU counter overflow event packet generation
dwtSLEEPEVT       : Enable Sleep counter overflow event packet generation
dwtDEVEVT         : Enable Exception counter overflow event packet generation
dwtCPIEVT         : Enable CPI counter overflow event packet generation
dwtTraceException : Enable Exception Trace Event packet generation
dwtSamplePC       : Enable PC sample using POSTCNT interval
dwtSyncTap        : Set how often Sync packets are sent out (None, CYCCNT[24], CYCCNT[26] or CYCCNT[28])
dwtPostTap        : Sets the POSTCNT tap (CYCCNT[6] or CYCCNT[10])
dwtPostInit       : Sets the initial value for the POSTCNT counter
dwtPostReset      : Sets the reload value for the POSTCNT counter
dwtCycEna         : Enable or disable CYCCNT

Configure ITM
-------------
ITMId             : Set the ITM ID for this device
ITMGTSFreq        : Set Global Timestamp frequency
ITMTSPrescale     : Set Timestamp Prescale
ITMSWOEna         : TS counter uses Processor Clock, or clock from TPIU Interface
ITMDWTEna         : Control if DWT packets are forwarded to the ITM
ITMSYNCEna        : Control if sync packets are transmitted
ITMTSEna          : Enable local timestamp generation
ITMEna            : Master Enable for ITM
ITMTER            : Set Trace Enable Register bitmap for 32*<Block>
ITMTPR            : Enable block 8*bit access from unprivledged code
end
# ====================================================================
# ====================================================================
# ====================================================================

# Locations in the memory map for interesting things

set $ITMBASE=0xE0000000
set $DWTBASE=0xE0001000
set $FPBBASE=0xE0002000
set $SCBBASE=0xE000ED00
set $DCBBASE=0xE000EDF0
set $TPIUBASE=0xE0040000
set $ETMBASE=0xE0041000

# Definitions for the CPU types we currently support
set $CPU_IMXRT1021=1
set $CPU_STM32=2

# Legacy fixups...lets avoid upsetting anyone too much

define enableSTM32SWD
       echo enableSTM32SWD: This command has been replaced with enableSTM32SWO\n
       quit
end

define prepareSWD
       echo prepareSWD: This command has been replaced with prepareSWO\n
       quit
end
# ====================================================================
define prepareSWO
  set $clockspeed=72000000
  set $speed=2250000
  set $useTPIU=1
  set $useMan=0

  if $argc >= 1
    set $clockspeed = $arg0
  end

  if $argc >= 2
    set $speed = $arg1
  end

  if $argc >= 3
    set $useTPIU = $arg2
  end

  if $argc >= 4
    set $useMan = $arg3
  end

  # Make sure we can get to everything
  set *($ITMBASE+0xfb0) = 0xc5acce55
  set *($ETMBASE+0xfb0) = 0xc5acce55

  # Enable DEMCR TRCENA
  set *($DCBBASE+0xC)|=(1<<24)

  if ($useMan==0)
    # Use Async mode pin protocol (TPIU_SPPR)
    set *($TPIUBASE+0xF0) = 2
  else
    # Use Manchester mode pin protocol (TPIU_SPPR)
    set *($TPIUBASE+0xF0) = 1

    # There are two edges in a bit, so double the clock
    set $speed = $speed*2
  end

  # Output bits at speed dependent on system clock speed (floats to avoid round-down)
  set *($TPIUBASE+0x10) = (int)((((float)$clockspeed)/((float)$speed))+(float)0.5)-1

  if ($useTPIU==1)
    # Use TPIU formatter and flush
    set *($TPIUBASE+0x304) = 0x102
  else
    set *($TPIUBASE+0x304) = 0x100
  end

  # Flush all initial configuration
  set *($DCBBASE+0xC) |= 0x1000000
  set *($DWTBASE) = 0
  set *($ITMBASE+0xe80) = 0
end
document prepareSWO
prepareSWO <ClockSpd> <Speed> <UseTPIU> <UseMan>: Prepare output trace data port at specified speed
  <ClockSpd>: Speed of the CPU SystemCoreClock
  <Speed>   : Speed to use (Ideally an integer divisor of SystemCoreClock)
  <UseTPIU> : Set to 1 to use TPIU
  <UseMan>  : Set to 1 use use Manchester encoding
end

# ====================================================================
define enableIMXRT1021SWO
  # Store the CPU we are using
  set $CPU=$CPU_IMXRT1021

  # Enable Trace Clocks
  set *0x400FC068|=(3<<22)

  # Set Trace clock input to be from PLL2 PFD0
  set *0x400Fc018&=~(3<<14)
  set *0x400Fc018|=(2<<14)

  # Set AD_B0_04 to be an input, and no drive (defaults to JTAG otherwise)
  set *0x401f80cc=5
  set *0x401f8240=0

  # Set AD_B0_11 to be SWO, with specific output characteristics
  set *0x401F80E8=6
  set *0x401F825C=0x6020
end
document enableIMXRT1021SWO
enableIMXRT1021SWO Configure output pin on IMXRT1021 for SWO use.
end
# ====================================================================

define enableSTM32SWO
  set $tgt=1
  if $argc >= 1
    set $tgt = $arg0
  end
  set $CPU=$CPU_STM32
  if ($tgt==4)
    # STM32F4 variant.
    # Enable AHB1ENR
    set *0x40023830 |= 0x02
    # Set MODER for PB3
    set *0x40020400 &= ~(0x000000C0)
    set *0x40020400 |= 0x00000080
    # Set max (100MHz) speed in OSPEEDR
    set *0x40020408 |= 0x000000C0
    # No pull up or down in PUPDR
    set *0x4002040C &= ~(0x000000C0)
    # Set AF0 (==TRACESWO) in AFRL
    set *0x40020420 &= ~(0x0000F000)
  else
    # STM32F1 variant.
    # RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
    set *0x40021018 |= 1
    # AFIO->MAPR |= (2 << 24); // Disable JTAG to release TRACESWO
    set *0x40010004 |= 0x2000000
  end
  # Common initialisation.
  # DBGMCU->CR |= DBGMCU_CR_TRACE_IOEN;
  set *0xE0042004 |= 0x20
end
document enableSTM32SWO
enableSTM32SWO Configure output pin on STM32 for SWO use.
end
# ====================================================================
# Enable CORTEX TRACE on preconfigured pins
define _doTRACE
     # Must be called with $bits containing number of bits to set trace for

     # Enable Trace TRCENA (DCB DEMCR)
     set *($DCBBASE+0xC)=(1<<24)

     set *($ITMBASE+0xfb0) = 0xc5acce55
     set *($ETMBASE+0xfb0) = 0xc5acce55

     # Set port size (TPIU_CSPSR)
     set *($TPIUBASE+4) = (1<<$bits)

     # Set pin protocol to Sync Trace Port (TPIU_SPPR)
     set *($TPIUBASE+0xF0)=0
  
     # Flush all initial configuration
     # DWT_CTRL = 0,  ITM_TCR = 0 to start off with
     set *($DWTBASE) = 0
     set *($ITMBASE+0xe80) = 0
end
# ====================================================================
define enableSTM32TRACE
  set $bits=4
  
  if $argc >= 1
    set $bits = $arg0
  end
    if (($bits<1) || ($bits==3) || ($bits>4))
    help enableSTM32TRACE
  end

  set $bits = $bits-1
  set $CPU=$CPU_STM32

  # Enable AHB1ENR
  set *0x40023830 |= 0x10

  # Setup PE2 & PE3
  # Port Mode
  set *0x40021000 &= ~(0x000000F0)
  set *0x40021000 |= 0xA0
  # Drive speed (Very high)
  set *0x40021008 |= 0xf0
  # No Pull up or down
  set *0x4002100C &= ~0xF0
  # AF0
  set *0x40021020 &= ~0xF0

  if ($bits>0)
     # Setup PE4
     set *0x40021000 &= ~(0x00000300)
     set *0x40021000 |= 0x200
     set *0x40021008 |= 0x300
     set *0x4002100C &= ~0x300
     set *0x40021020 &= ~0x300
  end

  if ($bits>1)
     # Setup PE5 & PE6

     set *0x40021000 &= ~(0x00003C00)
     set *0x40021000 |= 0x2800
     set *0x40021008 |= 0x3C00
     set *0x4002100C &= ~0x3C00
     set *0x40021020 &= ~0x3C00
  end

  # Set number of bits in DBGMCU_CR
  set *0xE0042004 &= ~(3<<6)

  if ($bits<3)
     set *0xE0042004 |= ((($bits+1)<<6) | (1<<5))
  else
     set *0xE0042004 |= ((3<<6) | (1<<5))
  end

  # Finally start the trace output
  _doTRACE
end
document enableSTM32TRACE
enableSTM32TRACE <Width>: Enable TRACE on STM32 pins
  <Width>   : Number of bits wide (1,2 or 4 only)
end
# ====================================================================
define dwtPOSTCNT
  if ($argc!=1)
    help dwtPOSTCNT
  else
    set *($DCBBASE+0xC) |= 0x1000000
    if ($arg0==1)
      set *($DWTBASE) |= (1<<22)
    else
      set *($DWTBASE) &= ~(1<<22)
    end
  end
end
document dwtPOSTCNT
dwtPOSTCNT <0|1> Enable POSTCNT underflow event counter packet generation
end
# ====================================================================
define dwtFOLDEVT
  if ($argc!=1)
    help dwtFOLDEVT
  else
    set *($DCBBASE+0xC) |= 0x1000000
    if ($arg0==1)
      set *($DWTBASE) |= (1<<21)
    else
      set *($DWTBASE) &= ~(1<<21)
    end
  end
end
document dwtFOLDEVT
dwtFOLDEVT <0|1> Enable folded-instruction counter overflow event packet generation
end
# ====================================================================
define dwtLSUEVT
  if ($argc!=1)
    help dwtLSUEVT
  else
    set *($DCBBASE+0xC) |= 0x1000000
    if ($arg0==1)
      set *($DWTBASE) |= (1<<20)
    else
      set *($DWTBASE) &= ~(1<<20)
    end
  end
end
document dwtLSUEVT
dwtLSUEVT <0|1> Enable LSU counter overflow event packet generation
end
# ====================================================================
define dwtSLEEPEVT
  if ($argc!=1)
    help dwtSLEEPEVT
  else
    set *($DCBBASE+0xC) |= 0x1000000
    if ($arg0==1)
      set *($DWTBASE) |= (1<<19)
    else
      set *($DWTBASE) &= ~(1<<19)
    end
  end
end
document dwtSLEEPEVT
dwtSLEEPEVT <0|1> Enable Sleep counter overflow event packet generation
end
# ====================================================================
define dwtCEVEVT
  if ($argc!=1)
    help dwtCEVEVT
  else
    set *($DCBBASE+0xC) |= 0x1000000
    if ($arg0==1)
      set *($DWTBASE) |= (1<<18)
    else
      set *($DWTBASE) &= ~(1<<18)
    end
  end
end
document dwtCEVEVT
dwtDEVEVT <0|1> Enable Exception counter overflow event packet generation
end
# ====================================================================
define dwtCPIEVT
  if ($argc!=1)
    help dwtCPIEVT
  else
    set *($DCBBASE+0xC) |= 0x1000000
    if ($arg0==1)
      set *($DWTBASE) |= (1<<17)
    else
      set *($DWTBASE) &= ~(1<<17)
    end
  end
end
document dwtCPIEVT
dwtCPIEVT <0|1> Enable CPI counter overflow event packet generation
end
# ====================================================================
define dwtTraceException
  if ($argc!=1)
    help dwtTraceException
  else
    set *($DCBBASE+0xC) |= 0x1000000
    if ($arg0==1)
      set *($DWTBASE) |= (1<<16)
    else
      set *($DWTBASE) &= ~(1<<16)
    end
  end
end
document dwtTraceException
dwtTraceException <0|1> Enable Exception Trace Event packet generation
end
# ====================================================================
define dwtSamplePC
  if ($argc!=1)
    help dwtSamplePC
  else
    set *($DCBBASE+0xC) |= 0x1000000
    if ($arg0==1)
      set *($DWTBASE) |= (1<<12)
    else
      set *($DWTBASE) &= ~(1<<12)
    end
  end
end
document dwtSamplePC
dwtSamplePC <0|1> Enable PC sample using POSTCNT interval
end
# ====================================================================
define dwtSyncTap
  if (($argc!=1) || ($arg0<0) || ($arg0>3))
    help dwtSyncTap
  else
    set *($DCBBASE|0xC) |= 0x1000000
    set *($DWTBASE) &= ~(0x03<<10)
    set *($DWTBASE) |= (($arg0&0x03)<<10)
  end
end
document dwtSyncTap
dwtSyncTap <0..3> Set how often Sync packets are sent out (None, CYCCNT[24], CYCCNT[26] or CYCCNT[28])
end
# ====================================================================
define dwtPostTap
  if (($argc!=1) || ($arg0<0) || ($arg0>1))
    help dwtPostTap
  else
    set *($DCBBASE|0xC) |= 0x1000000
    if ($arg0==0)
      set *($DWTBASE) &= ~(1<<9)
    else
      set *($DWTBASE) |= (1<<9)      
    end
  end
end
document dwtPostTap
dwtPostTap <0..1> Sets the POSTCNT tap (CYCCNT[6] or CYCCNT[10])
end
# ====================================================================
define dwtPostInit
  if (($argc!=1) || ($arg0<0) || ($arg0>15))
    help dwtPostInit
  else
    set *($DCBBASE+0xC) |= 0x1000000
    set *($DWTBASE) &= ~(0x0f<<5)    
    set *($DWTBASE) |= (($arg0&0x0f)<<5)
  end
end
document dwtPostInit
dwtPostInit <0..15> Sets the initial value for the POSTCNT counter
end
# ====================================================================
define dwtPostReset
  if (($argc!=1) || ($arg0<0) || ($arg0>15))
    help dwtPostReset
  else
    set *($DCBBASE+0xC) |= 0x1000000
    set *($DWTBASE) &= ~(0x0f<<1)    
    set *($DWTBASE) |= (($arg0&0x0f)<<1)
  end
end
document dwtPostReset
dwtPostReset <0..15> Sets the reload value for the POSTCNT counter
In conjunction with the dwtPostTap, this gives you a relatively wide range
of sampling speeds.  Lower numbers are faster.
end
# ====================================================================
define dwtCycEna
  if ($argc!=1)
    help dwtCycEna
  else
    set *($DCBBASE+0xC) |= 0x1000000
    if ($arg0==1)
      set *($DWTBASE) |= (1<<0)
    else
      set *($DWTBASE) &= ~(1<<0)
    end
  end
end
document dwtCycEna
dwtCycEna <0|1> Enable or disable CYCCNT
end
# ====================================================================
# ====================================================================
define ITMId
  if (($argc!=1) || ($arg0<0) || ($arg0>127))
    help ITMBusId
  else
    set *($ITMBASE+0xfb0) = 0xc5acce55
    set *($ITMBASE+0xe80) &= ~(0x7F<<16)
    set *($ITMBASE+0xe80) |= (($arg0&0x7f)<<16)
  end
end
document ITMId
ITMId <0..127>: Set the ITM ID for this device
end
# ====================================================================
define ITMGTSFreq
  if (($argc!=1) || ($arg0<0) || ($arg0>3))
    help ITMGTSFreq
  else
    set *($ITMBASE+0xfb0) = 0xc5acce55
    set *($ITMBASE+0xe80) &= ~(0x3<<10)
    set *($ITMBASE+0xe80) |= (($arg0&3)<<10)
  end
end
document ITMGTSFreq
ITMGTSFreq <0..3> Set Global Timestamp frequency
    [0-Disable, 1-Approx 128 Cycles, 2-Approx 8192 Cycles, 3-Whenever possible]
end
# ====================================================================
define ITMTSPrescale
  if (($argc!=1) || ($arg0<0) || ($arg0>3))
    help ITMGTSFreq
  else
    set *($ITMBASE+0xfb0) = 0xc5acce55
    set *($ITMBASE+0xe80) &= ~(0x3<<8)
    set *($ITMBASE+0xe80) |= (($arg0&3)<<8)
  end
end
document ITMTSPrescale
ITMTSPrescale <0..3> Set Timestamp Prescale
    [0-No Prescale, 1-/4, 2-/16, 3-/64]
end
# ====================================================================
define ITMSWOEna
  if (($argc!=1) || ($arg0<0) || ($arg0>1))
    help ITMSWOEna
  else
    set *($ITMBASE+0xfb0) = 0xc5acce55
    if ($arg0==0)
      set *($ITMBASE+0xe80) &= ~(0x1<<4)
    else
      set *($ITMBASE+0xe80) |= (($arg0&1)<<4)
    end
  end
end
document ITMSWOEna
ITMSWOEna <0|1> 0-TS counter uses Processor Clock
                1-TS counter uses clock from TPIU Interface, and is held in reset while the output line is idle.
end
# ====================================================================
define ITMDWTEna
  if (($argc!=1) || ($arg0<0) || ($arg0>1))
    help ITMDWTEna
  else
    set *($ITMBASE+0xfb0) = 0xc5acce55
    if ($arg0==0)
      set *($ITMBASE+0xe80) &= ~(0x1<<3)
    else
      set *($ITMBASE+0xe80) |= (($arg0&1)<<3)
    end
  end
end
document ITMDWTEna
ITMDWTEna <0|1> Enable DWT packets forwarding
    0-DWT packets are not forwarded to the ITM
    1-DWT packets are output to the ITM
end
# ====================================================================
define ITMSYNCEna
  if (($argc!=1) || ($arg0<0) || ($arg0>1))
    help ITMSYNCEna
  else
    set *($ITMBASE+0xfb0) = 0xc5acce55
    if ($arg0==0)
      set *($ITMBASE+0xe80) &= ~(0x1<<2)
    else
      set *($ITMBASE+0xe80) |= (($arg0&1)<<2)
    end
  end
end
document ITMSYNCEna
ITMSYNCEna <0|1> Enable sync packets generation
    0-Sync packets are not transmitted
    1-Sync packets are transmitted
end
# ====================================================================
define ITMTSEna
  if (($argc!=1) || ($arg0<0) || ($arg0>1))
    help ITMTSEna
  else
    set *($ITMBASE+0xfb0) = 0xc5acce55
    if ($arg0==0)
      set *($ITMBASE+0xe80) &= ~(0x1<<1)
    else
      set *($ITMBASE+0xe80) |= (($arg0&1)<<1)
    end
  end
end
document ITMTSEna
ITMTSEna <0|1> Enable local timestamp generation
end
# ====================================================================
define ITMEna
  if (($argc!=1) || ($arg0<0) || ($arg0>1))
    help ITMEna
  else
    set *($ITMBASE+0xfb0) = 0xc5acce55
    if ($arg0==0)
      set *($ITMBASE+0xe80) &= ~(0x1<<0)
    else
      set *($ITMBASE+0xe80) |= (($arg0&1)<<0)
    end
  end
end
document ITMEna
ITMEna <0|1> Master Enable for ITM
end
# ====================================================================
define ITMTER
  if (($argc!=2) || ($arg0<0) || ($arg0>7))
    help ITMTER
  else
    set *($ITMBASE+0xfb0) = 0xc5acce55
    set *($ITMBASE+0xe00+4*$arg0) = $arg1
  end
end
document ITMTER
ITMTER <Block> <Bitmask> Set Trace Enable Register bitmap for 32*<Block>
end
# ====================================================================
define ITMTPR
  if ($argc!=1)
    help ITMTPR
  else
    set *($ITMBASE+0xfb0) = 0xc5acce55
    set *($ITMBASE+0xe40) = $arg0 
  end
end
document ITMTPR
ITMTPR <Bitmask> Enable block 8*bit access from unprivledged code
end
# ====================================================================

